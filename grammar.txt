// no distinction between expressions and statements
// before eliminating left recursion
expr: primitive
    | ifExpr
    | whileExpr
    | varDecl
    | anonFunc
    | funcDef
    | arrayLiteral
    | OPAREN expr CPAREN                                        // parenthesized expression
    | RETURN expr
    | NOT expr
    | expr OPAREN optArgList CPAREN                             // function call
    | expr OPAREN optArgList CPAREN OBRACE optExprList CBRACE   // higher order function call
    | expr OSQBRACE expr CSQBRACE                               // array access
    | expr OPERATOR expr                                        // binary operator expression
    | expr EQUALS expr

// after removing left recursion
expr: primary metaExpr
    | ifExpr metaExpr
    | whileExpr metaExpr
    | varDecl metaExpr
    | anonFunc metaExpr
    | funcDef metaExpr
    | arrayLiteral metaExpr
    | OPAREN expr CPAREN metaExpr
    | RETURN expr
    | NOT expr

metaExpr: DOT IDENTIFIER metaExpr
        | OPAREN optArgList CPAREN metaExpr
        | OPAREN optArgList CPAREN OBRACE optExprList CBRACE metaExpr
        | OSQBRACE expr CSQBRACE metaExpr
        | operator expr
        | EQUALS expr
        | EPSILON


arrayLiteral : OSQBRACE optCommaExprList CSQBRACE

optArgList : EPSILON
           | argList

argList : expr
        | expr COMMA argList

optCommaExprList : EPSILON
                 | commaExprList

commaExprList : expr
              | expr COMMA commaExprList

varDecl : LET IDENTIFIER
        | LET IDENTIFIER EQUAL expression

funcDef : DEF IDENTIFIER OPAREN optParamList CPAREN OBRACE optExprList CBRACE
        | DEF IDENTIFIER OPAREN optParamList CPAREN funcParam OBRACE optExprList CBRACE

funcParam : OPAREN IDENTIFIER CPAREN
          | OPAREN IDENTIFIER COLON optParamList CPAREN

optParamList : EPSILON
             | paramList

paramList : IDENTIFIER
          | IDENTIFIER COMMA paramList

optExpressionList : EPSILON
                 | exprList

exprList : expr
         | expr NEWLINE exprList
         | expr SEMICOLON exprList

ifStatement : IF OPAREN expression CPAREN OBRACE expressionList CBRACE optElse

optElse : EPSILON
        | ELSE ifStatement
        | ELSE OBRACE expressionList CBRACE

whileStatement : WHILE OPAREN expression CPAREN OBRACE expressionList CBRACE

primary : NUMBER
        | STRING
        | TRUE
        | FALSE
        | NULL
        | IDENTIFIER 

operator : PLUS
         | MINUS
         | TIMES
         | DIVIDE
         | AND
         | OR
         | XOR
         | BIT_AND
         | BIT_OR
         | BIT_XOR
         | DOUBLE_EQUAL
         | GREATER_THAN
         | LESS_THAN
         | LEQ
         | GEQ
         | NEQ
         | TRIPLE_EQUAL
         | NOT_TRIPLE_EQUAL

anonFunc : DEF OPAREN optParamList CPAREN OBRACE optExpressionList CBRACE
         | DEF OPAREN optParamList CPAREN funcParam OBRACE optExprList CBRACE
